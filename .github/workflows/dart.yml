# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
     runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

    
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '12'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          architecture: x64


      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: dart test

      # Web-specific steps, only for Ubuntu as it supports headless Chrome by default
      - name: Run Web Tests
        if: matrix.os == 'ubuntu-latest'
        run: dart test --platform chrome

      - name: Build Web
        if: matrix.os == 'ubuntu-latest'
        run: dart build web --release

      # Build Android APK (only on Linux and Windows)
      - name: Build Android APK
        if: matrix.os != 'macos-latest'
        run: dart build apk --release --split-per-abi

      # Build iOS IPA (only on macOS)
      - name: Build iOS IPA
        if: matrix.os == 'macos-latest'
        run: dart build ipa --no-codesign

      - name: Upload Artifacts
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: "Flutter Build Artifacts - ${{ matrix.os }}"
          path: |
            build/app/outputs/apk/release/*
            build/ios/ipa/*.ipa
            build/web/*
  
      - name: Push to Releases
        if: matrix.os == 'ubuntu-latest'
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/apk/release/*
            build/ios/ipa/*.ipa
            build/web/*
          tag: v1.0.${{ github.run_number }}
          token: ${{ secrets.TOKEN }}
